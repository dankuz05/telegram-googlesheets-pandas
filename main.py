import telebot
import data_for_start
from datetime import date
import gspread
import pandas as pd
import functions
bot= telebot.TeleBot(data_for_start.bot_token)
google = gspread.service_account()
running=True
@bot.message_handler(commands=['start','help'])
def send_welcome (message):
    bot.reply_to(message,"–ó–¥—Ä–∞–≤—Å—Ç—É–π—Ç–µ!" 
                         "\nüìù/in - –í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ"
                         "\nüìä/out - –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"
                         "\n/change - –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"
                         "\n/cass - –ö–∞—Å—Å–∞"
                         "\n/garage - –û—Å—Ç–∞—Ç–∫–∏"
                         "\n/value - –û–±–æ—Ä–æ—Ç"
                         "\nüìà/graphics - –ì—Ä–∞—Ñ–∏–∫–∏"
                         "\n/in_minus - –£—á–µ—Å—Ç—å —Ç—Ä–∞—Ç—É")
@bot.message_handler(func= lambda m: True)
def echo_all(message): # –°–¢–ê–†–¢–û–í–û–ï –ú–ï–ù–Æ
    if message.text == '/in':
        bot.send_message(message.from_user.id,'–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º'
                                              '\n–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏,–≤–µ—Å,–ö–æ–ª-–≤–æ, –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (–¥–ª—è —Ä—ã–±—ã —Ü–µ–Ω–∞ –∑–∞ –∫–≥)')
        bot.register_next_step_handler(message,inner)
    if message.text=='/out':
        bot.send_message(message.from_user.id,'–ú–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö'
                                              "\n/sum- –ü–æ–∫–∞–∂–µ—Ç —Å—É–º–º—É –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
                                              "\n/sum_type- –ü–æ–∫–∞–∂–µ—Ç —Å—É–º–º—É –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ –æ–ø—Ä. –≤–∏–¥—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
        bot.register_next_step_handler(message,outer)
    if message.text=='/cass':
        gc=gspread.service_account()
        sheet= gc.open_by_key(data_for_start.sheet_cassa)
        df= pd.DataFrame(sheet.sheet1.get(data_for_start.sheet_cassa_size))
        headers= df.iloc[0]
        df=pd.DataFrame(df.values[1:],columns=headers)
        df['–°—É–º–º–∞']=df['–°—É–º–º–∞'].apply(pd.to_numeric)
        gq=df.agg({'–°—É–º–º–∞':'sum'})
        gq=gq[0]
        bot.send_message(message.from_user.id,f'–ö–∞—Å—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {gq}')

    if message.text=='/change':
        bot.send_message(message.from_user.id,'–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏–∏')

    if message.text=='/garage':
        bot.send_message(message.from_user.id,f'–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å:'
                                              f'\n–ü–û–†–¶–ò–û–ù–ù–´–ï:'
                                              f'\n {functions.garage_ikra()}'
                                              f'\n–†–ê–ó–í–ï–°–ù–´–ï:'
                                              f'\n'
                                              f'{functions.garage_all()}')

    if message.text=='/value':
        bot.send_message(message.from_user.id,'–û–±–æ—Ä–æ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å'
                                              f'\n—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {functions.oborot()}')
    if message.text=='/in_minus':
        bot.send_message(message.from_user.id,'–í–Ω–µ—Å–∏—Ç–µ –∑–∞—Ç—Ä–∞—Ç—É —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º'
                                              '\n–°—Ç–∞—Ç—å—è —Ç—Ä–∞—Ç,–°—É–º–º–∞')
        bot.register_next_step_handler(message, outer_minus) # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–ª—è–µ—Ç —Ç—Ä–∞—Ç—É
# –ë–õ–û–ö /IN
def inner(message):

        today = date.today().strftime("%d.%m.%Y")
        gc1 = gspread.service_account()
        sh = gc1.open_by_key(data_for_start.sheets_ss_id)  # –£–∫–∞–∑–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
        df = pd.DataFrame(sh.sheet1.get(data_for_start.sheets_size_ss))  # –£–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–æ–π —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
        headers = df.iloc[0]
        df = pd.DataFrame(df.values[1:], columns=headers)
        df[['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å']] = df[['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å']].apply(pd.to_numeric)
        df[['–í–∏–¥']] = df[['–í–∏–¥']].apply(pd.to_numeric)

        type_product,weight,quant,price = message.text.split(",", 4)
        first_message = f"–î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ‚úÖ " \
                        f"\n–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ - {type_product}  " \
                        f"\n–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ - {price}" \
                        f"\n–û–±—ä–µ–º - {quant}"

        bot.send_message(message.from_user.id, first_message)
        #selfprice = int(selfprice[0])
        # –ó–∞–ø–∏—Å—å –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É
        if type_product =='–ò–∫—Ä–∞':
            if weight in ['120','250','500']:
                selfprice= df[df['–í–∏–¥']==int(weight)]
                selfprice=selfprice.agg({'–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å':'sum'})
                selfprice=int(selfprice[0])
                sheet = google.open_by_key(data_for_start.sheets_id)
                sheet.sheet1.append_row([today, type_product,weight, quant,price,selfprice])
                bot.send_message(message.from_user.id,'–î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã!')
                z=int(quant)*int(price)
                functions.cass_add(type_product,z)
                functions.store(weight,quant)
            else:
                bot.send_message(message.from_user.id,f'–ë–∞–Ω–∫–∏ –≤ {weight} –≥—Ä–∞–º–º–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        if type_product in ['–§–æ—Ä–µ–ª—å','–°–µ–º–≥–∞']:
            sh = gc1.open_by_key(data_for_start.sheets_ss_all)
            df = pd.DataFrame(sh.sheet1.get(data_for_start.sheets_size_ss))
            headers = df.iloc[0]
            df = pd.DataFrame(df.values[1:], columns=headers)
            df[['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å']] = df[['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å']].apply(pd.to_numeric)
            #df[['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏']] = df[['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏']].apply(pd.to_numeric)
            selfprice = df[df['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏'] == type_product]
            selfprice = selfprice.agg({'–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å': 'sum'})
            selfprice = int(selfprice[0])
            sheet=google.open_by_key(data_for_start.sheets_id_other)
            sheet.sheet1.append_row([today,type_product,weight,quant,price,selfprice])
            functions.store_all(type_product,quant,weight)
            bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã!')
        if type_product not in ['–ò–∫—Ä–∞','–§–æ—Ä–µ–ª—å','–°–µ–º–≥–∞']:
            bot.send_message(message.from_user.id,f'–ù–∞ {type_product} –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å')
    #except:
     #   bot.send_message(message.from_user.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö')



#–ë–ª–æ–∫ /OUT

def outer(message):
    if message.text=='/sum':
        bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º"
                                              "\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞, –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞, –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"
                                              "\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∏–∫—Ä–µ–ø–ª—é –Ω–∏–∂–µ")
        bot.send_message(message.from_user.id,'2022-01-01,2022-12-28,–ú–∞—Ä–∂–∞')
        bot.register_next_step_handler(message,summer)
    if message.text=='/sum_type':
        bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º"
                                              "\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞, –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞, –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å, –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏"
                                              "\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∏–∫—Ä–µ–ø–ª—é –Ω–∏–∂–µ")
        bot.send_message(message.from_user.id,"2022-01-01,2022-12-28,–ú–∞—Ä–∂–∞,–ò–∫—Ä–∞")
        bot.register_next_step_handler(message,summer_type)
def summer(message):
    date_start,date_end,value=message.text.split(",",2)
    bot.send_message(message.from_user.id,f"{value} —Å {date_start} –ø–æ {date_end}"
                                          f'\n---{functions.summa_non_group(date_start,date_end,value)}')

def summer_type(message):
    date_start, date_end, value, type = message.text.split(",", 3)
    bot.send_message(message.from_user.id,f"{value} c {date_start} –ø–æ {date_end} "
                                          f"\n—Å –≤–∏–¥–æ–º –ø—Ä–æ–¥—É–∫—Ü–∏–∏ {type}"
                                          f"\n---{functions.summa_with_group(date_start,date_end,value,type)}---")

def outer_minus(message):
    value,count=message.text.split(',',2)
    functions.cass_add(value,-int(count))



while running:
# if __name__ == '__main__':
    bot.polling(none_stop=True)
